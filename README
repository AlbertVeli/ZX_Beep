 ______     __  __        ______     ______     ______     ______
/\___  \   /\_\_\_\      /\  == \   /\  ___\   /\  ___\   /\  == \
\/_/  /__  \/_/\_\/_     \ \  __<   \ \  __\   \ \  __\   \ \  _-/
  /\_____\   /\_\/\_\     \ \_____\  \ \_____\  \ \_____\  \ \_\
  \/_____/   \/_/\/_/      \/_____/   \/_____/   \/_____/   \/_/


"What is a Computer Good For? Your new Timex Sinclair 2000 computer is
a very special instrument. It is a tool that can increase the power of
your mind as a hammer or a wheelbarrow assists your muscles."
--TS2068 User Manual


The purpose of this repository is primarily to be a skeleton you can
base your own ZX Spectrum projects upon. It compiles assembly code and
outputs a TAP-file, which can be read by most Spectrum emulators. I
have only tried it with: http://fuse-emulator.sourceforge.net/


BACKGROUND

When I was young the ZX Spectrum was a great inspiration. Me and my
friends entered BASIC-programs from computer magazines and manuals on
those soft rubber-keys. Even though we didn't realize it at the time,
we had embarked upon a path of learning the art (or should I call it
science?) of computer software programming. Today we can emulate that
childhood with tools like fuse, and even write new code for it.


BUT WHAT DOES IT DO?

ZX Beep repeatedly calls the BEEPER subroutine in the Spectrum ROM to
play some sweeping sound effects and an example song. The song is an old
Swedish marching tune called Mandom Mod (only the first half), written
a long time ago in a town far, far away [Orsa], long before the age of
impeding copyright claims. http://runeberg.org/vitaband/0123.html


BUILD

You need a git client, make and a C-compiler. On Debian-based systems
these can be found in the packages git, make and gcc:

  apt-get install git make gcc

See help.github.com/articles/set-up-git for more info on installing
git on various systems.

I have also compiled the code on OSX Mountain Lion where make and gcc
is installed by default, but git had to be installed manually. On
Windows it might work with MinGW, but I have not tried this.

Ok, lets go. Check out the ZX Beep source code from github:

  git clone https://github.com/AlbertVeli/ZX_Beep.git

And build everything with make:

  make

If everything works out, beep.tap should be created.

To create your own TAP-file, just edit the first lines in the Makefile
(SRC and INCSRCS), and create your own .asm files.

If you want to use it as-is and only create a new song, rename
mandom_mod.asm to the name of your song, and change the notes
data. Then change the string "mandom_mod.asm" in Makefile to your own
filename. You may also want to remove the calls to sweep_octave from
beep.asm.


SONG DATA

Data structure: enter frequency/length data byte-pairs as:

  Pitch,Len

where

Pitch    (A2 = A number 2 on a piano)
=====

 0 A2,  1 Bb,  2 B,  3 C,  4 C#,  5 D,  6 Eb,  7 E,  8 F,  9 F#,  10 G,  11 G#
12 A3, 13 Bb, 14 B, 15 C, 16 C#, 17 D, 18 Eb, 19 E, 20 F, 21 F#,  22 G,  23 G#
24 A4, 25 Bb, 26 B, 27 C, 28 C#, 29 D, 30 Eb, 31 E, 32 F, 33 F#,  34 G,  35 G#
etc

Len    1 -> Whole note (1 s)
===    2 -> Half note (1/2 s)
       3 -> Quarter note (1/4 s)
       4 -> Eigth note (1/8 s)
       5 -> Sixteenth note (1/16 s)
       6 -> Thirty-second note (1/32 s)
       etc

Example. 19,4 -> E3, Eigth note.


FREQUENCIES

In the song data frequencies are given as semitones above the base
note. But the BEEPER subroutine in ROM neither takes frequencies in
Hz, nor in semitones. Instead the frequency data word is calculated in
a rather intricate manner. See comments just before L03B5 in the ROM
disassembly:

 http://www.wearmouth.demon.co.uk/zx82.htm#L03B5

The algorithm given in the disassembly translates from frequency (Hz)
to register value (for HL). But you still have to calculate the
frequencies for all notes.

To complicate matters, there are many ways to calculate tone
frequencies. The standardized way is to use 440 Hz for the fourth A on
a piano (A4) and calculate the rest of the frequencies relative 440 Hz
with an algorithm called EQUAL TEMPERAMENT. If n is the number of
semitones away from A4, then the wanted frequency becomes:

  440 * 2^(n/12)

This works for all keys (because the errors are evenly distributed).

But if you want to fine tune harmonies for a specific key, then a guy
named Helmholtz figured out more optimal frequencies. The following
ratios (relative the base note frequency) can be used to calculate the
12 notes in an octave:

  1       ;  0 Unison
  25 / 24 ;  1 Minor Second
  9  / 8  ;  2 Major Second
  6  / 5  ;  3 Minor Third
  5  / 4  ;  4 Major Third
  4  / 3  ;  5 Fourth
  45 / 32 ;  6 Diminished Fifth
  3  / 2  ;  7 Fifth
  8  / 5  ;  8 Minor Sixth
  5  / 3  ;  9 Major Sixth
  9  / 5  ; 10 Minor Seventh
  15 / 8  ; 11 Major Seventh

So, if A4 is 440 Hz, then a C4 (minor third) becomes 440 * (6/5) = 528
Hz using Helmholtz's harmonic scale (aka JUST scale). Helmholtz based
his work on older philosophical writings of guys like Pythagoras et
al.

These JUST frequencies, with low-integer ratios, were used by guys
like Verdi and are sometimes refered to as Verdi tuning (or harmonic,
or Helmholtz). The downside of JUST scale is that you have to change
the frequencies to play a song in a different key. EQUAL TEMPERAMENT
is a compromise tuning that works equally well (or bad) for all
keys. For a visualisation using Lissajous curves, see
youtu.be/BhZpvGSPx6w

In the repository the frequency calculations have already been done by
freqs.c and the results are pasted into octaves.asm to be used as a
lookup-table (by beeper, in beep.asm).

To change scale, compile freqs.c by running "make freqs" and generate
the frequencies of your choice.

Example. To generate seven octaves in JUST scale, starting at C = 256
Hz (sometimes referred to as scientific pitch, because all C:s becomes
powers of two, and the other notes low-integer ratios of powers of
two) run:

 ./freqs -o 7 -j 256

And to generate six octaves with the vanilla EQUAL TEMPERED scale,
starting at 110 Hz (A, two octaves below 440 Hz), run:

 ./freqs -o 6 110


REFERENCES

- The BASIC manual for ZX Spectrum is exceptionally well
  written. Start there.
  http://www.worldofspectrum.org/ZXBasicManual/index.html

- World of Spectrum has links tho all things Spectrum.
  http://www.worldofspectrum.org/

- Introduction to Z80 Assembler
  http://www.worldofspectrum.org/Z80.html

- Z80 Heaven has details for the complete Z80 instruction set
  http://z80-heaven.wikidot.com/instructions-set

- Details of what happens in each Z80 instruction Machine Cycle*
  http://www.z80.info/z80ins.txt


Happy Hacking!

/Albert


* Each Machine Cycle takes 3-6 T-cycles (real CPU clock
  cycles). Spectrum runs the Z80 at 3.5 MHz. So if an instruction
  takes 9 T-cycles, it will execute in 9/3500000 seconds.
